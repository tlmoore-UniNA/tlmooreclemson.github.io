panel.background = element_blank(),
legend.position = "none")
p
# Plot ----
p <- ggplot(df[which(!df$name == "F-16"),],
aes(seq, seq, size = xsect_m2))+
geom_point()+
geom_label(mapping = aes(x=seq, y=seq, label=name),
size = 4, nudge_x = 0.25, nudge_y = 1)+
theme(aspect.ratio = 1, panel.grid = element_blank(),
panel.background = element_blank(),
legend.position = "none",
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.title = element_blank())
p
# Plot ----
p <- ggplot(df[which(!df$name == "F-16"),],
aes(seq, seq, size = xsect_m2))+
geom_point()+
geom_label(mapping = aes(x=seq, y=seq, label=name),
size = 4, nudge_x = 0.25, nudge_y = 1)+
scale_x_continuous(limits = c(-1,7))+
theme(aspect.ratio = 1, panel.grid = element_blank(),
panel.background = element_blank(),
legend.position = "none",
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.title = element_blank())
p
# Plot ----
p <- ggplot(df[which(!df$name == "F-16"),],
aes(seq, seq, size = xsect_m2))+
geom_point()+
geom_label(mapping = aes(x=seq, y=seq, label=name),
size = 4, nudge_x = 0.25, nudge_y = 1)+
scale_x_continuous(limits = c(-1,7))+
scale_y_continuous(limits = c(-1,7))+
theme(aspect.ratio = 1, panel.grid = element_blank(),
panel.background = element_blank(),
legend.position = "none",
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.title = element_blank())
p
# Plot ----
p <- ggplot(df[which(!df$name == "F-16"),],
aes(seq, seq, size = xsect_m2))+
geom_point()+
geom_label(mapping = aes(x=seq, y=seq, label=name),
size = 4, nudge_x = 0, nudge_y = 0.5)+
scale_x_continuous(limits = c(-1,7))+
scale_y_continuous(limits = c(-1,7))+
theme(aspect.ratio = 1, panel.grid = element_blank(),
panel.background = element_blank(),
legend.position = "none",
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.title = element_blank())
p
# Plot ----
p <- ggplot(df[which(!df$name == "F-16"),],
aes(seq, xsect_m2, size = xsect_m2))+
geom_point()+
geom_label(mapping = aes(x=seq, y=seq, label=name),
size = 4, nudge_x = 0, nudge_y = 0.5)+
scale_x_continuous(limits = c(-1,7))+
scale_y_continuous(limits = c(-1,7))+
theme(aspect.ratio = 1, panel.grid = element_blank(),
panel.background = element_blank(),
legend.position = "none",
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.title = element_blank())
p
# Plot ----
p <- ggplot(df[which(!df$name == "F-16"),],
aes(seq, xsect_m2, size = xsect_m2))+
geom_point()+
geom_label(mapping = aes(x=seq, y=xsect_m2, label=name),
size = 4, nudge_x = 0, nudge_y = 0.5)+
scale_x_continuous(limits = c(-1,7))+
scale_y_continuous(limits = c(-1,7))+
theme(aspect.ratio = 1, panel.grid = element_blank(),
panel.background = element_blank(),
legend.position = "none",
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.title = element_blank())
p
# Plot ----
p <- ggplot(df[which(!df$name == "F-16"),],
aes(seq, xsect_m2, size = xsect_m2))+
geom_point()+
geom_label(mapping = aes(x=seq, y=xsect_m2, label=name),
size = 4, nudge_x = 0, nudge_y = 0.5)+
scale_x_continuous(limits = c(-1,7))+
scale_y_continuous(limits = c(-1,7))+
theme(aspect.ratio = 1, panel.grid = element_blank(),
panel.background = element_blank(),
legend.position = "none",
#axis.ticks = element_blank(),
#axis.text = element_blank(),
axis.title = element_blank())
p
# Plot ----
p <- ggplot(df[which(!df$name == "F-16"),],
aes(seq, xsect_m2, size = xsect_m2))+
geom_point()+
geom_label(mapping = aes(x=seq, y=xsect_m2, label=name),
size = 4, nudge_x = 0, nudge_y = 0.5)+
scale_x_continuous(limits = c(-1,7))+
#  scale_y_continuous(limits = c(-1,7))+
theme(aspect.ratio = 1, panel.grid = element_blank(),
panel.background = element_blank(),
legend.position = "none",
#axis.ticks = element_blank(),
#axis.text = element_blank(),
axis.title = element_blank())
p
# Plot ----
p <- ggplot(df[which(!df$name == "F-16"),],
aes(seq, xsect_m2, size = xsect_m2))+
geom_point()+
geom_label(mapping = aes(x=seq, y=xsect_m2, label=name),
size = 4, nudge_x = 0, nudge_y = 0.15)+
scale_x_continuous(limits = c(-1,7))+
#  scale_y_continuous(limits = c(-1,7))+
theme(aspect.ratio = 1, panel.grid = element_blank(),
panel.background = element_blank(),
legend.position = "none",
#axis.ticks = element_blank(),
#axis.text = element_blank(),
axis.title = element_blank())
p
# Plot ----
p <- ggplot(df[which(!df$name == "F-16"),],
aes(seq, xsect_m2, size = xsect_m2))+
geom_point()+
geom_label(mapping = aes(x=seq, y=xsect_m2, label=name),
size = 4, nudge_x = 0, nudge_y = 0.05)+
scale_x_continuous(limits = c(-1,7))+
#  scale_y_continuous(limits = c(-1,7))+
theme(aspect.ratio = 1, panel.grid = element_blank(),
panel.background = element_blank(),
legend.position = "none",
#axis.ticks = element_blank(),
#axis.text = element_blank(),
axis.title = element_blank())
p
# Plot ----
p <- ggplot(df[which(!df$name == "F-16"),],
aes(seq, xsect_m2, size = xsect_m2))+
geom_point()+
geom_label(mapping = aes(x=seq, y=xsect_m2, label=name),
size = 4, nudge_x = 0, nudge_y = 0)+
scale_x_continuous(limits = c(-1,7))+
#  scale_y_continuous(limits = c(-1,7))+
theme(aspect.ratio = 1, panel.grid = element_blank(),
panel.background = element_blank(),
legend.position = "none",
#axis.ticks = element_blank(),
#axis.text = element_blank(),
axis.title = element_blank())
p
library(viridis)
show_col(viridis, n = 16)
?show_col
library(scales)
show_col(viridis, n = 16)
show_col(viridis(16), n = 16)
show_col(viridis(16))
show_col(magma(16))
inferno(magma(16))
show_col(inferno(16))
show_col(plasma(16))
show_col(rocket(16))
show_col(mako(16))
show_col(turbo(16))
library(ggsci)
show_col(npg(9))
show_col(npg())
show_col(pal_npg(9))
show_col(pal_npg)
pal_npg()
?pal_npg()
pal_npg(palette = c("nrc"), alpha = 1)
library(ggsci)
pal_npg(palette = c("nrc"), alpha = 1)
show_col(pal_npg(palette = c("nrc"), alpha = 1))
pal_npg()
?pal_npg()
show_col(pal_npg("nrc")(10))
show_col(pal_npg("nrc")(8))
show_col(pal_nejm("nrc")(8))
show_col(pal_nejm()(8))
show_col(pal_lancet()(8))
show_col(pal_uchicago()(8))
library(shiny)
# Load data ----
diam_url <- "https://github.com/tlmooreclemson/pyML_liposome/blob/main/shiny_data/ann_diameter_predictions.csv"
diam_data <- read.csv(url(diam_url))
# Load data ----
diam_url <- "https://github.com/tlmooreclemson/pyML_liposome/raw/main/shiny_data/ann_diameter_predictions.csv"
diam_data <- read.csv(url(diam_url))
# Load data ----
diam_url <- "https://raw.githubusercontent.com/tlmooreclemson/pyML_liposome/main/shiny_data/ann_diameter_predictions.csv"
diam_data <- read.csv(url(diam_url))
svm_url <- "https://raw.githubusercontent.com/tlmooreclemson/pyML_liposome/main/shiny_data/svm_predictions.csv"
svm_data <- read.csv(url(svm_url))
df <- merge(diam_data, svm_data, by=c("flow_rate", "conc", "ratio_aq_org", "curc_ug"))
rm(diam_data, svm_data, diam_url, svm_url)
df <- subset(df, select=-c(curc_ug))
df <- df[which(df$pred_dispersity == "monodisperse" &
df$pred_stability == "stable"),]
df <- subset(df, select=-c(pred_dispersity, pred_stability))
names(df)[names(df) == "flow_rate"] <- "Total Flow Rate (ml/min)"
names(df)[names(df) == "conc"] <- "Organic Phase Concentration (mg/ml)"
names(df)[names(df) == "ratio_aq_org"] <- "Aqueous:Organic Volume Ratio"
names(df)[names(df) == "ANN_diameter_nm"] <- "Predicted Diameter (nm)"
library(rsconnect)
rsconnect::deployAPp("/home/tmoore/Dropbox/ProgrammingProjects/pyML_liposome/shinyApp.R")
rsconnect::deployApp("/home/tmoore/Dropbox/ProgrammingProjects/pyML_liposome/shinyApp.R")
rsconnect::deployApp("/home/tmoore/Dropbox/ProgrammingProjects/pyML_liposome/")
runApp('Dropbox/ProgrammingProjects/pyML_liposome/shinyApp.R')
rsconnect::deployApp("/home/tmoore/Dropbox/ProgrammingProjects/pyML_liposome/")
rsconnect::deployApp("/home/tmoore/Dropbox/ProgrammingProjects/pyML_liposome/")
library(rsconnect)
rsconnect::deployApp("/home/tmoore/Dropbox/ProgrammingProjects/pyML_liposome/")
library(shiny)
sessionInfo()
28000/23
1217.391^2
400000/1400000
400000/1400000*100
install.packages("stringi")
getwd()
install.packages("ggthemes")
knitr::opts_chunk$set(echo = FALSE)
df_8um <- read.csv("/home/tmoore/Dropbox/MINDED/Projects/Data/SEM_6490LA/20220916_postPiranha_crEtch/8um_heightMeas.csv")
View(df_8um)
mean(df_8um$corr_height_um)
sd(df_8um$corr_height_um)
si <- read.csv("/home/tmoore/Dropbox/MINDED/Projects/Data/SEM_6490LA/20220916_postPiranha_crEtch/8um_heightMeas.csv")
silicon <- read.csv("/home/tmoore/Dropbox/MINDED/Projects/Data/SEM_6490LA/20220916_postPiranha_crEtch/8um_heightMeas.csv")
mean(silicon$corr_height_um)
mean_si <- mean(silicon$corr_height_um)
mean_si
sd_si <- sd(silicon$corr_height_um)
sd_si
pdms <- read.csv("/home/tmoore/Dropbox/MINDED/Projects/Data/SEM_6490LA/20230131_uMesh_deep_process/A_8um_25umDeep/pdms_height.csv")
mean_pdms <- mean(pdms$corr_height_um)
sd_pdms <- sd(pdms$corr_height_um)
mean_pdms
sd_pdms
pva <- read.csv("/home/tmoore/Dropbox/MINDED/Projects/Data/SEM_6490LA/20230131_uMesh_deep_process/A_8um_25umDeep/pva_height.csv")
mean_pva <- mean(pva$corr_height_um)
sd_pva <- sd(pva$corr_height_um)
mean_pva
sd_pva
library(shiny)
library(scholar)
library(dplyr)
scholar_id <- "B7vSqZsAAAAJ"
auth <- get_profile(scholar_id)
pubs <- get_publications(id=scholar_id)
h_index <- auth$h_index
num_pubs <- nrow(pubs) # get number of publications
tot_cites <- sum(pubs$cites) # get total number of citations
# Get num. publications per year
pubYears <- data.frame("year" = pubs$year)
pubYears <- pubYears %>% group_by(year) %>% count(year)
# Get citations per year
citesYear <- get_citation_history(scholar_id)
citesYear$cumulativeCites <- cumsum(citesYear$cites)
# Publication summary
df <- data.frame("num_pubs" = num_pubs,
"h_index" = as.numeric(h_index),
"tot_cites" = as.numeric(tot_cites))
# Begin shiny app -----
ui <- fluidPage(
## Publication summary -----
titlePanel("Article Publication Summary"),
mainPanel(
# Output table as first result
tableOutput('table'),
fluidRow(splitLayout(cellWidths = c("50%", "50%"),
plotOutput(outputId = 'plotYears'),
plotOutput(outputId = 'citeYears')
)
)
)
)
# Define server logic
server <- function(input, output){
output$table <- renderTable({
df
})
output$plotYears <- renderPlot({
p_years <- ggplot(pubYears, aes(year, n))+
geom_col(colour="black",fill="#3399CC")+
scale_x_continuous(name = "Year")+
scale_y_continuous(name = "No. publications")+
theme(panel.grid = element_blank(),
panel.background = element_rect(colour="#595959", fill = NA),
aspect.ratio=1)
p_years
})
output$citeYears <- renderPlot({
p_cites <- ggplot(citesYear, aes(year, cumulativeCites))+
geom_line(colour = "#3399CC")+
geom_point(shape = 21, fill = "#3399CC", colour = "#595959")+
scale_x_continuous(name = "Year")+
scale_y_continuous(name = "Total no. citations")+
theme(panel.grid = element_blank(),
panel.background = element_rect(colour="#595959", fill = NA),
aspect.ratio=1)
p_cites
})
output$network <- renderPlot({
})
}
# Run the app -----
shinyApp(ui = ui, server = server)
library(shiny)
library(scholar)
library(dplyr)
library(ggplot2)
scholar_id <- "B7vSqZsAAAAJ"
auth <- get_profile(scholar_id)
pubs <- get_publications(id=scholar_id)
h_index <- auth$h_index
num_pubs <- nrow(pubs) # get number of publications
tot_cites <- sum(pubs$cites) # get total number of citations
# Get num. publications per year
pubYears <- data.frame("year" = pubs$year)
pubYears <- pubYears %>% group_by(year) %>% count(year)
# Get citations per year
citesYear <- get_citation_history(scholar_id)
citesYear$cumulativeCites <- cumsum(citesYear$cites)
# Publication summary
df <- data.frame("num_pubs" = num_pubs,
"h_index" = as.numeric(h_index),
"tot_cites" = as.numeric(tot_cites))
# Begin shiny app -----
ui <- fluidPage(
## Publication summary -----
titlePanel("Article Publication Summary"),
mainPanel(
# Output table as first result
tableOutput('table'),
fluidRow(splitLayout(cellWidths = c("50%", "50%"),
plotOutput(outputId = 'plotYears'),
plotOutput(outputId = 'citeYears')
)
)
)
)
# Define server logic
server <- function(input, output){
output$table <- renderTable({
df
})
output$plotYears <- renderPlot({
p_years <- ggplot(pubYears, aes(year, n))+
geom_col(colour="black",fill="#3399CC")+
scale_x_continuous(name = "Year")+
scale_y_continuous(name = "No. publications")+
theme(panel.grid = element_blank(),
panel.background = element_rect(colour="#595959", fill = NA),
aspect.ratio=1)
p_years
})
output$citeYears <- renderPlot({
p_cites <- ggplot(citesYear, aes(year, cumulativeCites))+
geom_line(colour = "#3399CC")+
geom_point(shape = 21, fill = "#3399CC", colour = "#595959")+
scale_x_continuous(name = "Year")+
scale_y_continuous(name = "Total no. citations")+
theme(panel.grid = element_blank(),
panel.background = element_rect(colour="#595959", fill = NA),
aspect.ratio=1)
p_cites
})
output$network <- renderPlot({
})
}
# Run the app -----
shinyApp(ui = ui, server = server)
setwd("~/Insync/ProfPort/Personal_Webpage/tlmooreclemson.github.io/pages/pub_shiny/")
library(shiny)
library(scholar)
library(dplyr)
library(plotly)
library(ggplot2)
library(tidyr)
library(viridis)
library(geomnet)
# Pull and parse data from Google Scholar -----
scholar_id <- 'l5fRQdoAAAAJ'
auth <- get_profile(scholar_id)
h_index <- auth$h_index
pubs <- get_publications(id=scholar_id)
# Drop known 'non-publication publications'
pubs <- pubs[which(!pubs$pubid == 'qUcmZB5y_30C'),]
pubs <- pubs[which(!pubs$pubid == 'IjCSPb-OGe4C'),]
pubs <- pubs[which(!pubs$pubid == 'Se3iqnhoufwC'),]
pubs <- pubs[which(!pubs$pubid == 'roLk4NBRz8UC'),]
# Drop book chapters etc.
pubs <- pubs[which(!pubs$pubid == 'QIV2ME_5wuYC'),]
pubs <- pubs[which(!pubs$pubid == '3fE2CSJIrl8C'),]
# Get number of publications and total citations
num_pubs <- nrow(pubs)
tot_cites <- sum(pubs$cites)
# Get number of publications per year
pubYears <- data.frame("year" = pubs$year)
pubYears <- pubYears %>% group_by(year) %>%
count(year)
pubYears$year = as.numeric(pubYears$year)
# Get citations per year
citesYear <- get_citation_history(scholar_id)
citesYear$cumulativeCites <- cumsum(citesYear$cites) # cumulative citations
# Data frame for publication summary
df <- data.frame("num_pubs" = num_pubs,
"h_index" = as.numeric(h_index),
"tot_cites" = as.numeric(tot_cites))
df$h_index <- round(df$h_index, digits = 0)
df$tot_cites <- round(df$tot_cites, digits=0)
# Rename columns
names(df) = c("Total no. publications", "h-index", "Total no. citations")
# Generate a blank data frame to get complete list of authors
auth_net = data.frame("Authors" = NA)
# Loop through publication list and get extended data
for (i in pubs$pubid){ # Append the complete list of authors for each publication
auth_net[nrow(auth_net)+1,] = get_publication_data_extended(id=scholar_id, pub_id = i)$Authors
}
rm(i) # Remove the i variable created
auth_net <- na.omit(auth_net) # Remove the initial blank row
auth_net <- cbind(auth_net, pubs[,c("title", "journal", "pubid")]) # Flesh out the extended authors data frame
# Split authors separated by commas into individual rows
auth_net <- auth_net %>%
mutate(Authors = strsplit(as.character(Authors), ",")) %>%
unnest(Authors)
auth_net$Authors <- trimws(auth_net$Authors, which=c("both")) # Remove leading/trailing spaces
auth_net$Authors <-  gsub('[[:punct:] ]+',' ',auth_net$Authors) # Remove punctuation
# Substitute aliases for name
auth_net$Authors[auth_net$Authors == "Thomas L Moore"] <- "Thomas Moore"
auth_net$Authors[auth_net$Authors == "Thomas Lee Moore"] <- "Thomas Moore"
auth_net$Authors[auth_net$Authors == "Ana M Milosevic"] <- "Ana Milosevic"
auth_net$Authors[auth_net$Authors == "Apparao M Rao"] <- "Apparao Rao"
auth_net$Authors[auth_net$Authors == "Daniel C Colvin"] <- "Daniel C. Colvin"
auth_net$Authors[auth_net$Authors == "Erika K Jelen"] <- "Erika K. Jelen"
auth_net$Authors[auth_net$Authors == "Purnima Manghnani"] <- "Purnima N Manghnani"
auth_net$Authors[auth_net$Authors == "Alke Petri Fink"] <- "Alke Petri-Fink"
auth_net$Authors[auth_net$Authors == "Barbara Rothen Rutishauser"] <- "Barbara Rothen-Rutishauser"
auth_net$Authors[auth_net$Authors == "Dominic A Urban"] <- "Dominic Urban"
auth_net$Authors[auth_net$Authors == "S C J Loo"] <- "Joachim Loo"
auth_net$Authors[auth_net$Authors == "Rachel A Morrison"] <- "Rachel Morrison"
auth_net$Authors[auth_net$Authors == "Rama Podilakrishna"] <- "Ramakrishna Podila"
# Import the affilication list
affils <- read.csv("affiliationList.csv")
auth_net <- merge(auth_net, affils, by=c("Authors"), keep.all=TRUE) # merge with the affiliations
# Create a data frame for plotting the network
auth_net <- auth_net %>%
left_join(auth_net, by = "title") %>%
filter(!Authors.x == Authors.y) %>%
select(primary_author = Authors.x,
connection = Authors.y,
primary_affiliation = affiliation.x,
title)
vertices <- auth_net[!duplicated(auth_net[c('primary_author', 'primary_affiliation')]),]
vertices <- vertices %>% select('primary_author', 'primary_affiliation')
edges <- auth_net %>% select('primary_author', 'connection')
MMnet <- fortify(as.edgedf(edges), vertices)
p_years <- ggplot(pubYears, aes(year, n))+
geom_col(colour="#595959",fill="#3399CC")+
scale_x_continuous(name = "Year")+
scale_y_continuous(name = "No. publications")+
theme(axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
panel.grid = element_blank(),
panel.background = element_rect(colour="#595959", fill = NA),
aspect.ratio=1)
p_years
ggsave("plots/plot_pubYears.png", device = "png", units = c("cm"), dpi=300, width=10, height=10)
ggsave("plots/plot_pubYears.png", device = "png", units = c("cm"), dpi=300, width=12, height=12)
ggsave("plots/plot_pubYears.png", device = "png", units = c("cm"), dpi=300, width=14, height=14)
ggsave("plots/plot_pubYears.png", device = "png", units = c("cm"), dpi=300, width=14, height=12)
ggsave("plots/plot_pubYears.png", device = "png", units = c("cm"), dpi=300, width=14, height=13)
p_cites <- ggplot(citesYear, aes(year, cumulativeCites))+
geom_line(colour = "#3399CC")+
geom_point(size=4, shape = 21,
fill = "#3399CC", colour = "#595959")+
scale_x_continuous(name = "Year")+
scale_y_continuous(name = "Total no. citations")+
theme(axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
panel.grid = element_blank(),
panel.background = element_rect(colour="#595959", fill = NA),
aspect.ratio=1)
p_cites
ggsave("plots/plot_citesYears.png", device = "png", units = c("cm"), dpi=300, width=14, height=13)
p_network <- ggplot(data = MMnet, aes(from_id = from_id, to_id = to_id))+
geom_net(aes(colour = primary_affiliation), layout.alg="kamadakawai",
size=4, labelon=FALSE, vjust=-0.6, ecolour="black",
directed=FALSE, fontsize=3, ealpha=0.05)+
scale_colour_viridis_d(option="turbo")+
xlim(c(-0.05, 1.05))+
theme_net()+
theme(legend.position = "none")
p_network
ggsave("plots/plot_network.png", device = "png", units = c("cm"), dpi=300, width=14, height=14)
